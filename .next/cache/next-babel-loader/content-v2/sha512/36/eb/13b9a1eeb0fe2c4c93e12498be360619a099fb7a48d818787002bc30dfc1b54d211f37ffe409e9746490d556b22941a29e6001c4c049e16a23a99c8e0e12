{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yamaguchitaiyo/Documents/cookpad/spring-internship-2021-recipe-site/pages/recipes/[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\n\nvar RecipePage = function RecipePage(props) {\n  _s();\n\n  var router = useRouter();\n  var recipe = props.recipe;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Recipe Site\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RecipePage, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = RecipePage;\nexport var __N_SSP = true;\nexport default RecipePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"sources":["/Users/yamaguchitaiyo/Documents/cookpad/spring-internship-2021-recipe-site/pages/recipes/[id].tsx"],"names":["useRouter","RecipePage","props","router","recipe"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;;AAUA,IAAMC,UAA2B,GAAG,SAA9BA,UAA8B,CAACC,KAAD,EAAW;AAAA;;AAC7C,MAAMC,MAAM,GAAGH,SAAS,EAAxB;AAD6C,MAErCI,MAFqC,GAE1BF,KAF0B,CAErCE,MAFqC;AAI7C,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CATD;;GAAMH,U;UACWD,S;;;KADXC,U;;AA2BN,eAAeA,UAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport { useState, useEffect } from \"react\";\nimport type { NextPage, GetServerSideProps } from \"next\";\nimport { getRecipe, Recipe } from \"../../lib/recipe\";\n//getserversideprops\n\ntype Props = {\n  recipe: Recipe;\n};\n\nconst RecipePage: NextPage<Props> = (props) => {\n  const router = useRouter();\n  const { recipe } = props;\n\n  return (\n    <div>\n      <h1>My Recipe Site</h1>\n    </div>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const id = Number(context.params?.id);\n  if (id === 0 || isNaN(id)) {\n    return {\n      notFound: true,\n    };\n  } else {\n    const recipe = await getRecipe(id);\n    return {\n      props: {\n        recipe: recipe,\n      },\n    };\n  }\n};\n\nexport default RecipePage;\n"]},"metadata":{},"sourceType":"module"}