{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yamaguchitaiyo/Documents/cookpad/spring-internship-2021-recipe-site/pages/recipes/[id].tsx\";\nimport { getRecipe } from \"../../lib/recipe\";\n\nconst RecipePage = props => {\n  const recipeArray = props.recipe;\n  console.log(recipeArray);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n\nexport const getServerSideProps = async context => {\n  var _context$params;\n\n  const id = Number((_context$params = context.params) === null || _context$params === void 0 ? void 0 : _context$params.id);\n\n  if (id === 0 || isNaN(id)) {\n    return {\n      notFound: true\n    };\n  } else {\n    const recipe = await getRecipe(id);\n    return {\n      props: {\n        recipe: recipe\n      }\n    };\n  }\n};\nexport default RecipePage;","map":{"version":3,"sources":["/Users/yamaguchitaiyo/Documents/cookpad/spring-internship-2021-recipe-site/pages/recipes/[id].tsx"],"names":["getRecipe","RecipePage","props","recipeArray","recipe","console","log","getServerSideProps","context","id","Number","params","isNaN","notFound"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,kBAA1B;;AASA,MAAMC,UAA2B,GAAIC,KAAD,IAAW;AAC7C,QAAMC,WAAW,GAAGD,KAAK,CAACE,MAA1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAJD;;AAMA,OAAO,MAAMI,kBAAsC,GAAG,MAAOC,OAAP,IAAmB;AAAA;;AACvE,QAAMC,EAAE,GAAGC,MAAM,oBAACF,OAAO,CAACG,MAAT,oDAAC,gBAAgBF,EAAjB,CAAjB;;AACA,MAAIA,EAAE,KAAK,CAAP,IAAYG,KAAK,CAACH,EAAD,CAArB,EAA2B;AACzB,WAAO;AACLI,MAAAA,QAAQ,EAAE;AADL,KAAP;AAGD,GAJD,MAIO;AACL,UAAMT,MAAM,GAAG,MAAMJ,SAAS,CAACS,EAAD,CAA9B;AACA,WAAO;AACLP,MAAAA,KAAK,EAAE;AACLE,QAAAA,MAAM,EAAEA;AADH;AADF,KAAP;AAKD;AACF,CAdM;AAgBP,eAAeH,UAAf","sourcesContent":["import { getRecipe } from \"../../lib/recipe\";\n\nimport type { GetServerSideProps, NextPage } from \"next\";\nimport type { Recipe } from \"../../lib/recipe\";\n\ntype Props = {\n  recipe: Recipe;\n};\n\nconst RecipePage: NextPage<Props> = (props) => {\n  const recipeArray = props.recipe;\n  console.log(recipeArray);\n  return <div></div>;\n};\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  const id = Number(context.params?.id);\n  if (id === 0 || isNaN(id)) {\n    return {\n      notFound: true,\n    };\n  } else {\n    const recipe = await getRecipe(id);\n    return {\n      props: {\n        recipe: recipe,\n      },\n    };\n  }\n};\n\nexport default RecipePage;\n"]},"metadata":{},"sourceType":"module"}